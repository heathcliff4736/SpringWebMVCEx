plugins {
    id 'java'
    id 'war'
}

group 'com.ssg'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    // 서블릿 API - 웹 애플리케이션의 기본 인터페이스 제공
    compileOnly('javax.servlet:javax.servlet-api:4.0.1')   // 서블릿, 필터, 리스너 등 웹 요청 처리용 인터페이스
    // (Tomcat 등 WAS가 실제 구현체를 제공하므로 compileOnly로 설정)

    // JUnit 5 - 테스트 프레임워크
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")    // JUnit 테스트 작성용 API (테스트 어노테이션 등)
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")    // 실제 테스트 실행 엔진 (테스트 실행 시 동작)


    // Spring Framework 기본 구성요소
    implementation 'org.springframework:spring-core:5.3.27'        // 스프링 핵심 모듈 (DI, IoC 컨테이너의 기반)
    implementation 'org.springframework:spring-context:5.3.27'     // 스프링 컨텍스트 (Bean 관리, ApplicationContext 제공)
    
    implementation 'org.springframework:spring-tx:5.3.27'          // 트랜잭션 처리 지원 (선언적 트랜잭션 등)
    implementation 'org.springframework:spring-webmvc:5.3.27'      // Spring MVC (Controller, DispatcherServlet 등 웹 MVC 구조)

    implementation 'org.springframework:spring-jdbc:5.3.27'        // JDBC 템플릿 등 스프링의 DB 연동 기능
    implementation 'org.springframework:spring-test:5.3.27'        // 스프링 테스트 지원 (JUnit 통합, MockMvc 등)


    // Lombok - 코드 자동 생성
    compileOnly 'org.projectlombok:lombok:1.18.30'                 // 개발 시 @Getter, @Setter 등 코드 자동 생성 (컴파일 시 적용)
    testCompileOnly 'org.projectlombok:lombok:1.18.30'             // 테스트 코드에서도 Lombok 사용
    annotationProcessor 'org.projectlombok:lombok:1.18.30'         // 어노테이션 처리기 (실제 코드 생성 담당)
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'     // 테스트 환경용 Lombok 어노테이션 처리기


    // Log4j2 - 로깅 시스템
    implementation 'org.apache.logging.log4j:log4j-api:2.22.1'     // 로깅 API
    implementation 'org.apache.logging.log4j:log4j-core:2.22.1'    // 실제 로깅 구현체
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.22.1' // SLF4J → Log4j2 브릿지 (Spring의 로깅 통합용)


    // JSP
    implementation 'jstl:jstl:1.2'                                 // JSP에서 JSTL 태그 사용 (forEach, if, fmt 등)


    // Database 연결 및 커넥션 풀
    implementation 'mysql:mysql-connector-java:8.0.22'             // MySQL JDBC 드라이버
    implementation 'com.zaxxer:HikariCP:5.0.0'                     // HikariCP 커넥션 풀 (빠르고 가벼운 DB 커넥션 관리)


    // MyBatis - ORM 프레임워크
    implementation 'org.mybatis:mybatis:3.5.6'                     // MyBatis 핵심 (SQL 매퍼)
    implementation 'org.mybatis:mybatis-spring:2.0.6'              // MyBatis와 Spring 연동 (SqlSessionTemplate 등)

    implementation 'org.mybatis:mybatis-typehandlers-jsr310:1.0.2' // Java 8 날짜/시간(LocalDateTime 등) TypeHandler 지원


    // 유효성 검증 (Validation)
    implementation 'org.hibernate.validator:hibernate-validator:6.2.5.Final' // Bean Validation (ex: @NotNull, @Size 등)
    implementation 'javax.el:javax.el-api:3.0.0'                   // EL(Expression Language) API
    implementation 'org.glassfish.web:javax.el:2.2.6'              // EL 구현체 (Hibernate Validator에서 필요)


    // 객체 매핑 라이브러리
    implementation 'org.modelmapper:modelmapper:3.0.0'             // DTO ↔ Entity 간 객체 변환 자동화 도구

}

test {
    useJUnitPlatform()
}